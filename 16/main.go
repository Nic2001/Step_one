// Реализовать быструю сортировку массива (quicksort) встроенными методами языка.
package main

import "fmt"

// принцип сортировки: берем опорную точку (point), проходим массив, чтобы элементы,
// которые меньше опорной точки оказались слева от нее, а которые больше - справа
// дальше повторим сортировку для обеих половин
// продолжаем до тех пор, пока длина сортируемого массива >= 1
// такое мы делали на лабах, только там не го был, а плюсы

func quickSort(arr []int) {
	if len(arr) <= 1 { // если массив состоит из одного элемента - выходим из рекурсии
		return
	}

	point := div(arr) // выбираем опорную точку

	quickSort(arr[:point]) // рекурсивно сортируем получившиеся массивы
	quickSort(arr[point:])
}

func div(arr []int) int {
	point := arr[len(arr)/2] // находим опорную точку (значение элемента для сравнения)

	left := 0 // а также левый и правый края
	right := len(arr) - 1

	for {
		for ; arr[left] < point; left++ { // прверяя каждый элемент, ищем те, которые больше опорного и пока это верно - увеличиваем счётчик
			// чтобы найти индекс первого элемента, большего, чем опорный
		}

		for ; arr[right] > point; right-- { // то же самое, только меньше
		}

		if left >= right { // если до опорной точки все элементы меньше её - берём её дальше
			return right
		}

		swap(arr, left, right) // меняем элементы местами
	}
}

func swap(arr []int, i, j int) { // перемена элементов местами
	a := arr[i]
	arr[i] = arr[j]
	arr[j] = a
}

func main() {
	arr := []int{22, 3, 7, 284, -35, 9, -7, 0, 65, 93} // задаём массив и запускаем его на сортировку
	quickSort(arr)
	fmt.Println(arr)
}
